#include <iostream>
#include <graphics.h>
#include <winbgim.h>
#include <windows.h>

#include "Electronic Components/Electronics.h"
//#include "UI/UI.h"
#include "Helper.h"


using namespace std;

int main()
{
    // MainMenu menu;
    // menu.Show();
    // menu.WatchClick();

    Helper helper;

    DWORD screenWidth = GetSystemMetrics(SM_CXSCREEN);
    DWORD screenHeight = GetSystemMetrics(SM_CYSCREEN);

    initwindow(screenWidth/2, screenHeight/2);
    int windowWidth = getwindowwidth();
    int windowHeight = getwindowheight();

    Capacitor_Ceramic c[3];

    c[0].setPositionCenter(helper.makeVector_2D(100, 100));
    c[1].setPositionCenter(helper.makeVector_2D(350, 400));





    Helper::ConnectionPoint points[201], p1, p2;
    int totalPoints = 0;

    for (int i = 0; i < 2; i++)
    {
        for(int j = 0; j < c[i].getNumberOfConnectionPoints(); j++)
        {
            points[totalPoints++] = c[i].getConnectionPoints()[j];
        }

        std::cout << c[i].toString() << std :: endl;
    }

    bool click=false;
    int i, xMouse,yMouse, id;
    // aleg un punct de legatura (p1) de la nodul 1 (idNod1)


    do{
        if(ismouseclick(WM_LBUTTONDOWN) && !click)
        {
            Beep(2000,100);
            clearmouseclick(WM_LBUTTONDOWN);
            xMouse=mousex();
            yMouse=mousey();

            for (int i = 0; i < totalPoints; i++)
            {
                if (abs(points[i].position.x - xMouse)<=5 && abs(points[i].position.y - yMouse)<=5)
                {
                    std :: cout << points[i].connectedComponentCode << std :: endl;
                    p1 = points[i];
                    click=true;
                    break;
                }
            }
        }
    }while (!click);

    click=false;
    xMouse=mousex(); yMouse=mousey();

    do
    {
        helper.drawWire(p1.position, helper.makeVector_2D(xMouse, yMouse), WHITE);
        delay(50);
        helper.drawWire(p1.position, helper.makeVector_2D(xMouse, yMouse), BLACK);
        xMouse=mousex(); yMouse=mousey();

        if(ismouseclick(WM_LBUTTONDOWN) && !click)
        {
            Beep(1200,100);
            clearmouseclick(WM_LBUTTONDOWN);
            xMouse=mousex(); yMouse=mousey();

            for (int i = 0; i < totalPoints; i++)
            {
                if (abs(points[i].position.x - xMouse)<=5 && abs(points[i].position.y - yMouse)<=5)
                {
                    std :: cout << points[i].connectedComponentCode << std :: endl;
                    p2 = points[i];
                    click=true;
                    break;
                }
            }
        }
    }
    while (!click);

    helper.drawWire(p1.position, p2.position, WHITE);

//circle(v1.x, v1.y, 10);
//circle(v2.x, v2.y, 10);

//helper.drawWire(v1, v2);

    getch();
    closegraph();
    return 0;
}
